{
  "hooks": {
    "user-prompt-submit": [
      {
        "name": "grug-brain-planning-reminder",
        "command": "echo '🧠 GRUG BRAIN PLANNING REMINDER:\n\n• complexity very very bad - keep simple\n• say no to unnecessary features\n• prefer 80/20 solutions - maximum value, minimal code\n• avoid premature abstraction and over-engineering\n• prototype first to understand before big changes\n• integration tests > unit tests for most cases\n• working code > perfect processes\n• when stuck, step back and ask: \"what simplest thing that work?\"\n\nRemember: grug brain developer avoid complexity like fire. Simple good. Complex bad.'",
        "description": "Remind Claude to follow grug-brained principles when planning tasks",
        "match": {
          "tool": ["TodoWrite", "Task"],
          "content_pattern": ".*plan.*|.*implement.*|.*build.*|.*create.*|.*add.*"
        },
        "on_error": "continue"
      },
      {
        "name": "llm-prompt-guidelines-reminder",
        "command": "echo '🤖 LLM PROMPT GUIDELINES REMINDER:\n\nWhen writing prompts for LLMs, follow this structure:\n\n1. 🎭 ROLE AND OBJECTIVE\n   • Define the LLM'\''s persona and goal\n   • Example: \"You are a helpful and creative recipe assistant...\"\n\n2. 📋 INSTRUCTIONS / RESPONSE RULES\n   • Clear, specific, unambiguous directives\n   • What to do, what not to do\n   • Example: \"Always list ingredients before steps.\" \"Do not suggest recipes requiring rare ingredients unless specified.\"\n\n3. 🌍 CONTEXT\n   • Relevant background info/data\n   • Example: user'\''s available ingredients, dietary restrictions, cooking skill level\n\n4. 💡 EXAMPLES (Few-Shot Prompting)\n   • Input-output pairs demonstrating desired format, style, detail\n\n5. 🧠 REASONING STEPS (Chain-of-Thought - CoT)\n   • Instruct the model to \"think step by step\" for complex requests\n\n6. 📐 OUTPUT FORMATTING CONSTRAINTS\n   • Define structure clearly\n   • Example: \"Respond in JSON with keys: '\''recipe_name'\'', '\''ingredients'\'' (as a list), '\''steps'\'' (as a list of strings)\"\n\n7. 🏗️ DELIMITERS AND STRUCTURE\n   • Use markers (###, ```, XML tags) to separate prompt sections\n\nRemember: Well-structured prompts = better, more consistent results!'",
        "description": "Remind Claude to follow LLM prompt structure guidelines",
        "match": {
          "content_pattern": ".*prompt.*|.*gemini.*|.*openai.*|.*gpt.*|.*llm.*|.*generate_content.*|.*build.*prompt.*|.*response.*format.*"
        },
        "on_error": "continue"
      }
    ],
    "post-tool-use": [
      {
        "name": "immediate-python-check",
        "command": "echo '🔧 Running Python checks...' && uvx ruff check . --fix && uvx ruff format . && echo '✅ Python checks complete'",
        "description": "Immediate Python validation with output",
        "match": {
          "tool": ["Edit", "MultiEdit", "Write"],
          "file_pattern": "**/*.py"
        },
        "on_error": "warn"
      },
      {
        "name": "client-lint-fix",
        "command": "cd client && npm run lint --fix 2>/dev/null || true",
        "description": "Auto-fix ESLint issues in client code",
        "match": {
          "tool": ["Edit", "MultiEdit", "Write"],
          "file_pattern": "client/**/*.{ts,tsx,js,jsx}"
        },
        "on_error": "continue"
      },
      {
        "name": "client-typecheck",
        "command": "cd client && npm run typecheck",
        "description": "Validate TypeScript types after client changes",
        "match": {
          "tool": ["Edit", "MultiEdit", "Write"],
          "file_pattern": "client/**/*.{ts,tsx}"
        },
        "on_error": "block"
      }
    ],
    "stop": [
      {
        "name": "final-python-validation",
        "command": "uvx ruff check . --quiet",
        "description": "Final Python lint validation",
        "match": {
          "tool": ["Edit", "MultiEdit", "Write"],
          "file_pattern": "**/*.py"
        },
        "on_error": "warn"
      },
      {
        "name": "final-client-validation",
        "command": "cd client && npm run lint --quiet && npm run typecheck",
        "description": "Final client code validation",
        "match": {
          "tool": ["Edit", "MultiEdit", "Write"],
          "file_pattern": "client/**/*.{ts,tsx,js,jsx}"
        },
        "on_error": "warn"
      },
      {
        "name": "client-build-test",
        "command": "cd client && npm run build",
        "description": "Ensure client builds successfully",
        "match": {
          "tool": ["Edit", "MultiEdit", "Write"],
          "file_pattern": "client/**/*"
        },
        "on_error": "block"
      }
    ]
  },
  "settings": {
    "hook_timeout": 120000,
    "hook_parallel": false,
    "verbose": true
  }
}