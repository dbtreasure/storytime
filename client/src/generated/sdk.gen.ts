// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from './client';
import type { RegisterApiV1AuthRegisterPostData, RegisterApiV1AuthRegisterPostResponses, RegisterApiV1AuthRegisterPostErrors, LoginApiV1AuthLoginPostData, LoginApiV1AuthLoginPostResponses, LoginApiV1AuthLoginPostErrors, GetMeApiV1AuthMeGetData, GetMeApiV1AuthMeGetResponses, ListJobsApiV1JobsGetData, ListJobsApiV1JobsGetResponses, ListJobsApiV1JobsGetErrors, CreateJobApiV1JobsPostData, CreateJobApiV1JobsPostResponses, CreateJobApiV1JobsPostErrors, CancelJobApiV1JobsJobIdDeleteData, CancelJobApiV1JobsJobIdDeleteResponses, CancelJobApiV1JobsJobIdDeleteErrors, GetJobApiV1JobsJobIdGetData, GetJobApiV1JobsJobIdGetResponses, GetJobApiV1JobsJobIdGetErrors, GetJobStepsApiV1JobsJobIdStepsGetData, GetJobStepsApiV1JobsJobIdStepsGetResponses, GetJobStepsApiV1JobsJobIdStepsGetErrors, GetJobAudioApiV1JobsJobIdAudioGetData, GetJobAudioApiV1JobsJobIdAudioGetResponses, GetJobAudioApiV1JobsJobIdAudioGetErrors, GetBookChaptersApiV1JobsJobIdChaptersGetData, GetBookChaptersApiV1JobsJobIdChaptersGetResponses, GetBookChaptersApiV1JobsJobIdChaptersGetErrors, GetStreamingUrlApiV1AudioJobIdStreamGetData, GetStreamingUrlApiV1AudioJobIdStreamGetResponses, GetStreamingUrlApiV1AudioJobIdStreamGetErrors, GetAudioMetadataApiV1AudioJobIdMetadataGetData, GetAudioMetadataApiV1AudioJobIdMetadataGetResponses, GetAudioMetadataApiV1AudioJobIdMetadataGetErrors, GetPlaylistApiV1AudioJobIdPlaylistGetData, GetPlaylistApiV1AudioJobIdPlaylistGetResponses, GetPlaylistApiV1AudioJobIdPlaylistGetErrors, ResetProgressApiV1ProgressJobIdDeleteData, ResetProgressApiV1ProgressJobIdDeleteResponses, ResetProgressApiV1ProgressJobIdDeleteErrors, GetProgressApiV1ProgressJobIdGetData, GetProgressApiV1ProgressJobIdGetResponses, GetProgressApiV1ProgressJobIdGetErrors, UpdateProgressApiV1ProgressJobIdPutData, UpdateProgressApiV1ProgressJobIdPutResponses, UpdateProgressApiV1ProgressJobIdPutErrors, GetResumeInfoApiV1ProgressJobIdResumeGetData, GetResumeInfoApiV1ProgressJobIdResumeGetResponses, GetResumeInfoApiV1ProgressJobIdResumeGetErrors, GetRecentProgressApiV1ProgressUserRecentGetData, GetRecentProgressApiV1ProgressUserRecentGetResponses, GetRecentProgressApiV1ProgressUserRecentGetErrors, HealthHealthGetData, HealthHealthGetResponses } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * Register
 * Register a new user.
 */
export const registerApiV1AuthRegisterPost = <ThrowOnError extends boolean = false>(options: Options<RegisterApiV1AuthRegisterPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<RegisterApiV1AuthRegisterPostResponses, RegisterApiV1AuthRegisterPostErrors, ThrowOnError>({
        url: '/api/v1/auth/register',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Login
 * Authenticate user and return JWT token.
 */
export const loginApiV1AuthLoginPost = <ThrowOnError extends boolean = false>(options: Options<LoginApiV1AuthLoginPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<LoginApiV1AuthLoginPostResponses, LoginApiV1AuthLoginPostErrors, ThrowOnError>({
        url: '/api/v1/auth/login',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get Me
 * Get current user information.
 */
export const getMeApiV1AuthMeGet = <ThrowOnError extends boolean = false>(options?: Options<GetMeApiV1AuthMeGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetMeApiV1AuthMeGetResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/auth/me',
        ...options
    });
};

/**
 * List Jobs
 * List jobs for the current user with filtering and pagination.
 */
export const listJobsApiV1JobsGet = <ThrowOnError extends boolean = false>(options?: Options<ListJobsApiV1JobsGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ListJobsApiV1JobsGetResponses, ListJobsApiV1JobsGetErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/jobs',
        ...options
    });
};

/**
 * Create Job
 * Create a new job with automatic type detection.
 */
export const createJobApiV1JobsPost = <ThrowOnError extends boolean = false>(options: Options<CreateJobApiV1JobsPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateJobApiV1JobsPostResponses, CreateJobApiV1JobsPostErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/jobs',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Cancel Job
 * Cancel a job.
 */
export const cancelJobApiV1JobsJobIdDelete = <ThrowOnError extends boolean = false>(options: Options<CancelJobApiV1JobsJobIdDeleteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<CancelJobApiV1JobsJobIdDeleteResponses, CancelJobApiV1JobsJobIdDeleteErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/jobs/{job_id}',
        ...options
    });
};

/**
 * Get Job
 * Get detailed job information including steps.
 */
export const getJobApiV1JobsJobIdGet = <ThrowOnError extends boolean = false>(options: Options<GetJobApiV1JobsJobIdGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetJobApiV1JobsJobIdGetResponses, GetJobApiV1JobsJobIdGetErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/jobs/{job_id}',
        ...options
    });
};

/**
 * Get Job Steps
 * Get detailed step information for a job.
 */
export const getJobStepsApiV1JobsJobIdStepsGet = <ThrowOnError extends boolean = false>(options: Options<GetJobStepsApiV1JobsJobIdStepsGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetJobStepsApiV1JobsJobIdStepsGetResponses, GetJobStepsApiV1JobsJobIdStepsGetErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/jobs/{job_id}/steps',
        ...options
    });
};

/**
 * Get Job Audio
 * Download or stream the audio result from a completed job.
 */
export const getJobAudioApiV1JobsJobIdAudioGet = <ThrowOnError extends boolean = false>(options: Options<GetJobAudioApiV1JobsJobIdAudioGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetJobAudioApiV1JobsJobIdAudioGetResponses, GetJobAudioApiV1JobsJobIdAudioGetErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/jobs/{job_id}/audio',
        ...options
    });
};

/**
 * Get Book Chapters
 * Get chapter processing results for a book job.
 */
export const getBookChaptersApiV1JobsJobIdChaptersGet = <ThrowOnError extends boolean = false>(options: Options<GetBookChaptersApiV1JobsJobIdChaptersGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetBookChaptersApiV1JobsJobIdChaptersGetResponses, GetBookChaptersApiV1JobsJobIdChaptersGetErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/jobs/{job_id}/chapters',
        ...options
    });
};

/**
 * Get Streaming Url
 * Get pre-signed streaming URL for complete audio file.
 */
export const getStreamingUrlApiV1AudioJobIdStreamGet = <ThrowOnError extends boolean = false>(options: Options<GetStreamingUrlApiV1AudioJobIdStreamGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetStreamingUrlApiV1AudioJobIdStreamGetResponses, GetStreamingUrlApiV1AudioJobIdStreamGetErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/audio/{job_id}/stream',
        ...options
    });
};

/**
 * Get Audio Metadata
 * Get audio metadata including duration and format.
 */
export const getAudioMetadataApiV1AudioJobIdMetadataGet = <ThrowOnError extends boolean = false>(options: Options<GetAudioMetadataApiV1AudioJobIdMetadataGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetAudioMetadataApiV1AudioJobIdMetadataGetResponses, GetAudioMetadataApiV1AudioJobIdMetadataGetErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/audio/{job_id}/metadata',
        ...options
    });
};

/**
 * Get Playlist
 * Get M3U playlist for multi-chapter audiobooks.
 */
export const getPlaylistApiV1AudioJobIdPlaylistGet = <ThrowOnError extends boolean = false>(options: Options<GetPlaylistApiV1AudioJobIdPlaylistGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetPlaylistApiV1AudioJobIdPlaylistGetResponses, GetPlaylistApiV1AudioJobIdPlaylistGetErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/audio/{job_id}/playlist',
        ...options
    });
};

/**
 * Reset Progress
 * Reset playback progress for a specific job.
 */
export const resetProgressApiV1ProgressJobIdDelete = <ThrowOnError extends boolean = false>(options: Options<ResetProgressApiV1ProgressJobIdDeleteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<ResetProgressApiV1ProgressJobIdDeleteResponses, ResetProgressApiV1ProgressJobIdDeleteErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/progress/{job_id}',
        ...options
    });
};

/**
 * Get Progress
 * Get playback progress for a specific job.
 */
export const getProgressApiV1ProgressJobIdGet = <ThrowOnError extends boolean = false>(options: Options<GetProgressApiV1ProgressJobIdGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetProgressApiV1ProgressJobIdGetResponses, GetProgressApiV1ProgressJobIdGetErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/progress/{job_id}',
        ...options
    });
};

/**
 * Update Progress
 * Update playback progress for a specific job.
 */
export const updateProgressApiV1ProgressJobIdPut = <ThrowOnError extends boolean = false>(options: Options<UpdateProgressApiV1ProgressJobIdPutData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdateProgressApiV1ProgressJobIdPutResponses, UpdateProgressApiV1ProgressJobIdPutErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/progress/{job_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get Resume Info
 * Get resume information for a specific job.
 */
export const getResumeInfoApiV1ProgressJobIdResumeGet = <ThrowOnError extends boolean = false>(options: Options<GetResumeInfoApiV1ProgressJobIdResumeGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetResumeInfoApiV1ProgressJobIdResumeGetResponses, GetResumeInfoApiV1ProgressJobIdResumeGetErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/progress/{job_id}/resume',
        ...options
    });
};

/**
 * Get Recent Progress
 * Get recent playback progress for the current user.
 */
export const getRecentProgressApiV1ProgressUserRecentGet = <ThrowOnError extends boolean = false>(options?: Options<GetRecentProgressApiV1ProgressUserRecentGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetRecentProgressApiV1ProgressUserRecentGetResponses, GetRecentProgressApiV1ProgressUserRecentGetErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/progress/user/recent',
        ...options
    });
};

/**
 * Health
 * Return basic service health status.
 */
export const healthHealthGet = <ThrowOnError extends boolean = false>(options?: Options<HealthHealthGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<HealthHealthGetResponses, unknown, ThrowOnError>({
        url: '/health',
        ...options
    });
};