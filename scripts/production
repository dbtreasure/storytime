#!/bin/bash

# Production deployment script - uses Kamal for deployment

set -e

echo "🚀 StorytimeTTS Production Deployment"
echo "===================================="

# Check if we're in the right directory
if [[ ! -f "config/deploy.yml" ]]; then
    echo "❌ Error: Please run this script from the project root directory"
    echo "   (config/deploy.yml not found)"
    exit 1
fi

# Check if kamal is installed
if ! command -v kamal &> /dev/null; then
    echo "❌ Error: Kamal is not installed"
    echo "💡 Install with: gem install kamal"
    exit 1
fi

# Check for secrets
if [[ ! -f ".kamal/secrets" ]]; then
    echo "❌ Error: .kamal/secrets file not found"
    echo "📝 Please create .kamal/secrets with your production secrets"
    echo ""
    echo "Required secrets:"
    echo "  - DATABASE_URL"
    echo "  - REDIS_URL"
    echo "  - OPENAI_API_KEY"
    echo "  - DO_SPACES_KEY"
    echo "  - DO_SPACES_SECRET"
    echo "  - DO_SPACES_ENDPOINT"
    echo "  - DO_SPACES_BUCKET"
    echo "  - JWT_SECRET_KEY"
    echo "  - CELERY_BROKER_URL"
    echo "  - KAMAL_REGISTRY_USERNAME"
    echo "  - KAMAL_REGISTRY_PASSWORD"
    exit 1
fi

# Parse command line arguments
SETUP=false
BUILD_ONLY=false
LOGS=false
STATUS=false

while [[ $# -gt 0 ]]; do
    case $1 in
        --setup)
            SETUP=true
            shift
            ;;
        --build-only)
            BUILD_ONLY=true
            shift
            ;;
        --logs)
            LOGS=true
            shift
            ;;
        --status)
            STATUS=true
            shift
            ;;
        --help|-h)
            echo "Usage: $0 [options]"
            echo ""
            echo "Options:"
            echo "  --setup       Run initial setup (first deployment only)"
            echo "  --build-only  Only build and push images, don't deploy"
            echo "  --logs        Show deployment logs after deploying"
            echo "  --status      Show current deployment status"
            echo "  --help        Show this help message"
            echo ""
            echo "Examples:"
            echo "  $0                # Deploy to production"
            echo "  $0 --setup       # First-time setup"
            echo "  $0 --build-only  # Build and push images only"
            echo "  $0 --logs        # Deploy and show logs"
            exit 0
            ;;
        *)
            echo "❌ Error: Unknown option $1"
            echo "Use --help for usage information"
            exit 1
            ;;
    esac
done

# Handle --status flag
if [[ "$STATUS" == "true" ]]; then
    echo "📊 Checking deployment status..."
    kamal app details
    exit 0
fi

# Verify Docker is running
if ! docker info &> /dev/null; then
    echo "❌ Error: Docker is not running. Please start Docker Desktop."
    exit 1
fi

echo "🔍 Verifying deployment configuration..."
echo "Environment: production"
echo "Registry: $(grep 'server:' config/deploy.yml | awk '{print $2}')"
echo ""

# Build and push images
echo "🏗️  Building production images..."
echo "   Building with VITE_API_BASE_URL=https://plinytheai.com"

if kamal build push; then
    echo "✅ Images built and pushed successfully"
else
    echo "❌ Error: Failed to build and push images"
    exit 1
fi

# Exit early if build-only
if [[ "$BUILD_ONLY" == "true" ]]; then
    echo "✅ Build complete. Images are ready for deployment."
    exit 0
fi

# Setup if requested
if [[ "$SETUP" == "true" ]]; then
    echo "🔧 Running initial setup..."
    if kamal setup; then
        echo "✅ Setup completed successfully"
    else
        echo "❌ Error: Setup failed"
        exit 1
    fi
fi

# Deploy
echo "🚀 Deploying to production..."
if kamal deploy; then
    echo "✅ Deployment successful!"
    echo ""
    echo "🌐 Application URL: https://plinytheai.com"
    echo "📊 View status: kamal app details"
    echo "📋 View logs: kamal logs -f"

    # Show logs if requested
    if [[ "$LOGS" == "true" ]]; then
        echo ""
        echo "📋 Deployment logs:"
        kamal logs -f --lines 50
    fi
else
    echo "❌ Error: Deployment failed"
    echo "📋 Check logs: kamal logs -f"
    exit 1
fi
